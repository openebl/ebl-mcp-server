/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/business_unit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all business units */
        get: {
            parameters: {
                query?: {
                    /** @description The number of items to skip before collecting the result set. */
                    offset?: components["parameters"]["offsetParam"];
                    /** @description The number of items to return. */
                    limit?: components["parameters"]["limitParam"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Business units retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @description Total number of business units.
                             */
                            total?: number;
                            /** @description Records of business units. */
                            records?: components["schemas"]["ListBusinessUnitsRecord"][];
                        };
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create a new business unit */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateBusinessUnitRequest"];
                };
            };
            responses: {
                /** @description Business unit created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BusinessUnit"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/business_unit/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific business unit */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the business unit to retrieve. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Business unit retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ListBusinessUnitsRecord"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Business unit not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Update a specific business unit */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the business unit to update. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description User who makes the request. */
                        requester: string;
                        /** @description Unique DID of a BusinessUnit. */
                        id: string;
                        /** @description Name of the BusinessUnit. */
                        name: string;
                        /** @description List of addresses associated with the BusinessUnit. */
                        addresses?: string[];
                        /** @description Country Code of the BusinessUnit. (Eg: US, SG, CA) */
                        country?: string;
                        /** @description List of emails associated with the BusinessUnit. */
                        emails?: string[];
                        /** @description List of phone numbers associated with the BusinessUnit. */
                        phone_numbers?: string[];
                    };
                };
            };
            responses: {
                /** @description Business unit updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BusinessUnit"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Business unit not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/business_unit/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set the status of a specific business unit */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the business unit to update. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description User who makes the request. */
                        requester: string;
                        /** @description Status of the application. */
                        status: components["schemas"]["BusinessUnitStatus"];
                    };
                };
            };
            responses: {
                /** @description Business unit status updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BusinessUnit"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Business unit not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/business_unit/{id}/authentication": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all authentications for a business unit */
        get: {
            parameters: {
                query?: {
                    /** @description The number of items to skip before collecting the result set. */
                    offset?: components["parameters"]["offsetParam"];
                    /** @description The number of items to return. */
                    limit?: components["parameters"]["limitParam"];
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of authentications retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @description Total number of authentications
                             */
                            total?: number;
                            /** @description Records of authentications */
                            records?: components["schemas"]["BusinessUnitAuthentication"][];
                        };
                    };
                };
                /** @description Bad request, invalid parameters or business unit ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create a new authentication for a business unit */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the business unit */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description User who makes the request */
                        requester: string;
                        /** @description Option of the private key. */
                        private_key_option: components["schemas"]["PrivateKeyOption"];
                    };
                };
            };
            responses: {
                /** @description Authentication created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BusinessUnitAuthentication"];
                    };
                };
                /** @description Bad request, invalid parameters or business unit ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Business unit not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/business_unit/{id}/authentication/{authentication_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific authentication for a business unit */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the business unit */
                    id: string;
                    /** @description The ID of the authentication */
                    authentication_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Authentication retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BusinessUnitAuthentication"];
                    };
                };
                /** @description Bad request, invalid parameters or business unit ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Authentication not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Revoke a specific authentication for a business unit */
        delete: {
            parameters: {
                query?: {
                    /** @description User who makes the request */
                    requester?: string;
                };
                header?: never;
                path: {
                    /** @description The ID of the business unit */
                    id: string;
                    /** @description The ID of the authentication */
                    authentication_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Authentication revoked successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BusinessUnitAuthentication"];
                    };
                };
                /** @description Bad request, invalid parameters or business unit ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Authentication not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ebl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all eB/L */
        get: {
            parameters: {
                query?: {
                    /** @description The number of items to skip before collecting the result set. */
                    offset?: components["parameters"]["offsetParam"];
                    /** @description The number of items to return. */
                    limit?: components["parameters"]["limitParam"];
                    /** @description Status of the eB/L to be listed */
                    status?: "action_needed" | "upcoming" | "sent" | "archive";
                    /** @description Keyword to search, could be either 'From' or 'bl_number' */
                    keyword?: string;
                    /** @description whether to include the report */
                    report?: boolean;
                };
                header?: {
                    /** @description DID of the business unit who makes the request */
                    "X-Business-Unit-ID"?: components["parameters"]["BURequestHeader"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description eB/L retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ListBillOfLadingRecord"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Issue or draft a new eB/L */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description DID of the business unit who makes the request */
                    "X-Business-Unit-ID"?: components["parameters"]["BURequestHeader"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateBillOfLadingRequest"];
                };
            };
            responses: {
                /** @description eB/L created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BillOfLadingRecord"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ebl/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific eB/L */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description DID of the business unit who makes the request */
                    "X-Business-Unit-ID"?: components["parameters"]["BURequestHeader"];
                };
                path: {
                    /** @description The ID of the eB/L to retrieve. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description eB/L retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BillOfLadingRecord"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description eB/L not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ebl/{id}/document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download the uploaded eB/L document */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description DID of the business unit who makes the request */
                    "X-Business-Unit-ID"?: components["parameters"]["BURequestHeader"];
                };
                path: {
                    /** @description The ID of the eB/L to retrieve */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description eB/L file retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": string;
                        "application/pdf": string;
                        "image/jpeg": string;
                        "image/png": string;
                        "image/tiff": string;
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description eB/L not found or eB/L has no document */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ebl/{id}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update the draft eB/L */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description DID of the business unit who makes the request */
                    "X-Business-Unit-ID"?: components["parameters"]["BURequestHeader"];
                };
                path: {
                    /** @description The ID of the eB/L to update */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateBillOfLadingRequest"];
                };
            };
            responses: {
                /** @description eB/L updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BillOfLadingRecord"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description eB/L not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ebl/{id}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Transfer the eB/L to next owner */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description DID of the business unit who makes the request */
                    "X-Business-Unit-ID"?: components["parameters"]["BURequestHeader"];
                };
                path: {
                    /** @description The ID of the eB/L to transfer */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TransferBillOfLadingRequest"];
                };
            };
            responses: {
                /** @description eB/L transferred successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BillOfLadingRecord"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description eB/L not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ebl/{id}/return": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return the eB/L to last owner */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description DID of the business unit who makes the request */
                    "X-Business-Unit-ID"?: components["parameters"]["BURequestHeader"];
                };
                path: {
                    /** @description The ID of the eB/L to return */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ReturnBillOfLadingRequest"];
                };
            };
            responses: {
                /** @description eB/L returned successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BillOfLadingRecord"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description eB/L not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ebl/{id}/surrender": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Transfer the eB/L to the release agent */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description DID of the business unit who makes the request */
                    "X-Business-Unit-ID"?: components["parameters"]["BURequestHeader"];
                };
                path: {
                    /** @description The ID of the eB/L to surrender */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SurrenderBillOfLadingRequest"];
                };
            };
            responses: {
                /** @description eB/L surrendered successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BillOfLadingRecord"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description eB/L not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ebl/{id}/accomplish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accomplish the eB/L */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description DID of the business unit who makes the request */
                    "X-Business-Unit-ID"?: components["parameters"]["BURequestHeader"];
                };
                path: {
                    /** @description The ID of the eB/L to accomplish */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AccomplishBillOfLadingRequest"];
                };
            };
            responses: {
                /** @description eB/L accomplished successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BillOfLadingRecord"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description eB/L not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ebl/{id}/print_to_paper": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Print the eB/L to paper */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description DID of the business unit who makes the request */
                    "X-Business-Unit-ID"?: components["parameters"]["BURequestHeader"];
                };
                path: {
                    /** @description The ID of the eB/L to print to paper */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PrintToPaperBillOfLadingRequest"];
                };
            };
            responses: {
                /** @description eB/L printed to paper successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BillOfLadingRecord"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description eB/L not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ebl/{id}/amendment_request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request amendment for the eB/L */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description DID of the business unit who makes the request */
                    "X-Business-Unit-ID"?: components["parameters"]["BURequestHeader"];
                };
                path: {
                    /** @description The ID of the eB/L to request amendment */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AmendmentRequestBillOfLadingRequest"];
                };
            };
            responses: {
                /** @description eB/L requested amendment successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BillOfLadingRecord"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description eB/L not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ebl/{id}/amend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Amend the eB/L */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description DID of the business unit who makes the request */
                    "X-Business-Unit-ID"?: components["parameters"]["BURequestHeader"];
                };
                path: {
                    /** @description The ID of the eB/L to amend */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AmendBillOfLadingRequest"];
                };
            };
            responses: {
                /** @description eB/L amended successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BillOfLadingRecord"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description eB/L not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ebl/{id}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete the draft eB/L */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description DID of the business unit who makes the request */
                    "X-Business-Unit-ID"?: components["parameters"]["BURequestHeader"];
                };
                path: {
                    /** @description The ID of the eB/L to amend */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["DeleteBillOfLadingRequest"];
                };
            };
            responses: {
                /** @description eB/L amended successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BillOfLadingRecord"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description eB/L not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all webhook */
        get: {
            parameters: {
                query?: {
                    /** @description The number of items to skip before collecting the result set. */
                    offset?: components["parameters"]["offsetParam"];
                    /** @description The number of items to return. */
                    limit?: components["parameters"]["limitParam"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description webhook retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ListWebhookRecord"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create a new webhook */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateWebhookRequest"];
                };
            };
            responses: {
                /** @description webhook created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Webhook"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhook/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific webhook */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the webhook to retrieve */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description webhook retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Webhook"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description webhook not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Update a specific webhook */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the webhook to update */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateWebhookRequest"];
                };
            };
            responses: {
                /** @description webhook updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Webhook"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description webhook not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Delete a specific webhook */
        delete: {
            parameters: {
                query: {
                    /** @description User who makes the request */
                    requester: string;
                };
                header?: never;
                path: {
                    /** @description The ID of the webhook to delete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description webhook deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Webhook"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description webhook not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description Type of the private key.
         * @enum {string}
         */
        PrivateKeyType: "RSA" | "ECDSA";
        /**
         * @description Curve type of the private key.
         * @enum {string}
         */
        ECDSACurveType: "P-256" | "P-384" | "P-521";
        PrivateKeyOption: {
            /** @description Type of the private key. */
            key_type?: components["schemas"]["PrivateKeyType"];
            /**
             * Format: int32
             * @description Bit length of the private key. Only used when KeyType is RSA.
             */
            bit_length?: number;
            /** @description Curve type of the private key. Only used when KeyType is ECDSA. */
            curve_type?: components["schemas"]["ECDSACurveType"];
        };
        /** @enum {string} */
        BusinessUnitStatus: "active" | "inactive";
        /**
         * @description Status of the authentication.
         * @enum {string}
         */
        BusinessUnitAuthenticationStatus: "pending" | "active" | "revoked";
        BusinessUnit: {
            /** @description Unique DID of a BusinessUnit. */
            id?: string;
            /**
             * Format: int64
             * @description Version of the BusinessUnit.
             */
            version?: number;
            /** @description The ID of the application this BusinessUnit belongs to. */
            application_id?: string;
            status?: components["schemas"]["BusinessUnitStatus"];
            /** @description Name of the BusinessUnit. */
            name?: string;
            /** @description List of addresses associated with the BusinessUnit. */
            addresses?: string[];
            /** @description Country Code of the BusinessUnit. (Eg: US, SG, CA) */
            country?: string;
            /** @description List of emails associated with the BusinessUnit. */
            emails?: string[];
            /** @description List of phone numbers associated with the BusinessUnit. */
            phone_numbers?: string[];
            /**
             * Format: int64
             * @description Unix Time (in second) when the BusinessUnit was created.
             */
            created_at?: number;
            /** @description User who created the BusinessUnit. */
            created_by?: string;
            /**
             * Format: int64
             * @description Unix Time (in second) when the BusinessUnit was last updated.
             */
            updated_at?: number;
            /** @description User who last updated the BusinessUnit. */
            updated_by?: string;
        };
        BusinessUnitAuthentication: {
            /** @description Unique ID of the authentication. */
            id?: string;
            /**
             * Format: int64
             * @description Version of the authentication.
             */
            version?: number;
            /** @description Unique DID of a BusinessUnit. */
            business_unit?: string;
            status?: components["schemas"]["BusinessUnitAuthenticationStatus"];
            /**
             * Format: int64
             * @description Unix Time (in second) when the authentication was created.
             */
            created_at?: number;
            /** @description User who created the authentication. */
            created_by?: string;
            /**
             * Format: int64
             * @description Unix Time (in second) when the authentication was revoked.
             */
            revoked_at?: number;
            /** @description User who revoked the authentication. */
            revoked_by?: string;
            /** @description PEM encoded private key. */
            private_key?: string;
            /** @description PEM encoded certificate. */
            certificate?: string;
            /** @description PEM encoded intermediate certificates. */
            intermediate_certs?: string[];
        };
        ListBusinessUnitsRecord: {
            business_unit?: components["schemas"]["BusinessUnit"];
            /** @description The authentications of the business unit. */
            authentications?: components["schemas"]["BusinessUnitAuthentication"][];
        };
        CreateBusinessUnitRequest: {
            /** @description User who makes the request. */
            requester: string;
            /** @description Name of the BusinessUnit. */
            name: string;
            /** @description List of addresses associated with the BusinessUnit. */
            addresses?: string[];
            /** @description Country Code of the BusinessUnit. (Eg: US, SG, CA) */
            country?: string;
            /** @description List of emails associated with the BusinessUnit. */
            emails?: string[];
            /** @description List of phone numbers associated with the BusinessUnit. */
            phone_numbers?: string[];
            status: components["schemas"]["BusinessUnitStatus"];
        };
        /**
         * @description B/L Document Type
         * @enum {string}
         */
        BillOfLadingDocumentType: "MasterBillOfLading" | "HouseBillOfLading";
        /**
         * @description action to perform on the eB/L
         * @enum {string}
         */
        BillOfLadingAction: "UPDATE_DRAFT" | "AMEND" | "REQUEST_AMEND" | "PRINT" | "TRANSFER" | "RETURN" | "SURRENDER" | "ACCOMPLISH" | "DELETE";
        Location: {
            /** @description Name of the location */
            locationName?: string;
            /** @description UN location code */
            UNLocationCode?: string;
        };
        /** @description Application specific metadata. It must be a valid JSON object. */
        ApplicationMetaData: Record<string, never>;
        /** @description Metadata of the uploaded document */
        FileInfo: {
            /** @description File name of the uploaded document */
            name?: string;
            /** @description MIME type of the uploaded document */
            file_type?: string;
            /**
             * Format: date-time
             * @description When the document was created.
             */
            created_date?: string;
        };
        /** @description Metadata of the uploaded document */
        File: {
            /** @description File name of the uploaded document */
            name: string;
            /** @description MIME type of the uploaded document */
            type: string;
            /**
             * Format: byte
             * @description base64-encoded content of the document
             */
            content: string;
        };
        /** @description Event of issuing the eB/L */
        BillOfLading: {
            bill_of_lading_v3?: components["schemas"]["TransportDocument"];
            file?: components["schemas"]["FileInfo"];
            doc_type?: components["schemas"]["BillOfLadingDocumentType"];
            /** @description DID of the next owner */
            transfer_to?: string;
            /** @description DID of the issuing agent */
            created_by?: string;
            /**
             * Format: date-time
             * @description When the eB/L was created
             */
            created_at?: string;
            /** @description Optional note from the requester */
            note?: string;
            metadata?: components["schemas"]["ApplicationMetaData"];
        };
        /** @description Event of transferring the eB/L */
        Transfer: {
            /** @description DID of the business unit who makes the transfer */
            transfer_by?: string;
            /** @description DID of the business unit who receives the transfer */
            transfer_to?: string;
            /**
             * Format: date-time
             * @description When the eB/L was transferred
             */
            transfer_at?: string;
            /** @description Optional note from the requester */
            note?: string;
            metadata?: components["schemas"]["ApplicationMetaData"];
        };
        /** @description Event of returning the eB/L */
        Return: {
            /** @description DID of the business unit who makes the return */
            return_by?: string;
            /** @description DID of the business unit who receives the return */
            return_to?: string;
            /**
             * Format: date-time
             * @description When the eB/L was returned
             */
            return_at?: string;
            /** @description Optional note from the requester */
            note?: string;
            metadata?: components["schemas"]["ApplicationMetaData"];
        };
        /** @description Event of surrendering the eB/L */
        Surrender: {
            /** @description DID of the business unit who makes the surrender */
            surrender_by?: string;
            /** @description DID of the business unit who receives the surrender */
            surrender_to?: string;
            /**
             * Format: date-time
             * @description When the eB/L was surrendered
             */
            surrender_at?: string;
            /** @description Optional note from the requester */
            note?: string;
            metadata?: components["schemas"]["ApplicationMetaData"];
        };
        /** @description Event of requesting amendment for the eB/L */
        AmendmentRequest: {
            /** @description DID of the business unit who makes the request */
            request_by?: string;
            /** @description DID of the business unit who receives the request */
            request_to?: string;
            /**
             * Format: date-time
             * @description When the eB/L was requested amendment
             */
            request_at?: string;
            /** @description Optional note from the requester */
            note?: string;
            metadata?: components["schemas"]["ApplicationMetaData"];
        };
        /** @description Event of printing the eB/L to paper */
        PrintToPaper: {
            /** @description DID of the business unit who makes the print to paper */
            print_by?: string;
            /**
             * Format: date-time
             * @description When the eB/L was printed to paper
             */
            print_at?: string;
            /** @description Optional note from the requester */
            note?: string;
            metadata?: components["schemas"]["ApplicationMetaData"];
        };
        /** @description Event of accomplishing the eB/L */
        Accomplish: {
            /** @description DID of the business unit who makes the accomplish */
            accomplish_by?: string;
            /**
             * Format: date-time
             * @description When the eB/L was accomplished
             */
            accomplish_at?: string;
            /** @description Optional note from the requester */
            note?: string;
            metadata?: components["schemas"]["ApplicationMetaData"];
        };
        /** @description Event of the eB/L. The properties are mutual exclusive. Only one of them can be present. */
        BillOfLadingEvent: {
            bill_of_lading?: components["schemas"]["BillOfLading"];
            transfer?: components["schemas"]["Transfer"];
            return?: components["schemas"]["Return"];
            surrender?: components["schemas"]["Surrender"];
            amendment_request?: components["schemas"]["AmendmentRequest"];
            print_to_paper?: components["schemas"]["PrintToPaper"];
            accomplish?: components["schemas"]["Accomplish"];
        };
        /** @description Detail information of the eB/L */
        BillOfLadingPack: {
            /** @description Unique ID of a eB/L */
            id?: string;
            /**
             * Format: int64
             * @description Version of the eB/L
             */
            version?: number;
            /** @description SHA512 hash of the previous version of the eB/L */
            parent_hash?: string;
            /** @description DID of the current owner */
            current_owner?: string;
            /** @description eB/L history event list. The order of events is from the oldest to the newest. */
            events?: components["schemas"]["BillOfLadingEvent"][];
        };
        BillOfLadingRecord: {
            allow_actions?: components["schemas"]["BillOfLadingAction"][];
            bl?: components["schemas"]["BillOfLadingPack"];
        };
        ListBillOfLadingReport: {
            /**
             * Format: int32
             * @description Number of eB/Ls that need action
             */
            action_needed?: number;
            /**
             * Format: int32
             * @description Number of upcoming eB/Ls
             */
            upcoming?: number;
            /**
             * Format: int32
             * @description Number of sent eB/Ls
             */
            sent?: number;
            /**
             * Format: int32
             * @description Number of archived eB/Ls
             */
            archive?: number;
        };
        ListBillOfLadingRecord: {
            /**
             * Format: int32
             * @description Total number of the eB/L
             */
            total?: number;
            records?: components["schemas"]["BillOfLadingRecord"][];
            report?: components["schemas"]["ListBillOfLadingReport"];
        };
        /**
         * @description event to trigger the webhook
         * @enum {string}
         */
        WebhookEventType: "bl.issued" | "bl.transferred" | "bl.returned" | "bl.amendment_requested" | "bl.amended" | "bl.surrendered" | "bl.accomplished" | "bl.printed_to_paper" | "bu.created" | "bu.updated" | "auth.created" | "auth.revoked";
        Webhook: {
            /** @description Unique ID of a webhook */
            id?: string;
            /**
             * Format: int64
             * @description Version of the webhook
             */
            version?: number;
            /** @description Indicates if the webhook is deleted */
            deleted?: boolean;
            /** @description The URL that should have the event issued to it */
            url?: string;
            /**
             * Format: int64
             * @description Unix Time (in second) when the webhook was created
             */
            created_at?: number;
            /** @description User who created the webhook */
            created_by?: string;
            /**
             * Format: int64
             * @description Unix Time (in second) when the webhook was last updated
             */
            updated_at?: number;
            /** @description User who last updated the webhook */
            updated_by?: string;
            events?: components["schemas"]["WebhookEventType"][];
            /** @description secret key used to generate the signature */
            secret?: string;
        };
        /** @description Webhook event sent to the given URL */
        WebhookEvent: {
            /** @description Unique ID of the object that is the subject of the event trigger */
            id?: string;
            /** @description The URL the WebhookEvent is sent to */
            url?: string;
            type?: components["schemas"]["WebhookEventType"];
            /**
             * Format: int64
             * @description Unix Time (in second) when the event was created
             */
            created_at?: number;
        };
        ListWebhookRecord: {
            /**
             * Format: int32
             * @description Total number of the webhook
             */
            total?: number;
            records?: components["schemas"]["Webhook"][];
        };
        BaseRequest: {
            metadata?: components["schemas"]["ApplicationMetaData"];
        };
        UpdateBillOfLadingRequest: components["schemas"]["BaseRequest"] & {
            /** @description The ID for authentication. The eB/L will be signed with the authentication. */
            authentication_id: string;
            /** @description The file associated with the request */
            file: components["schemas"]["File"];
            /** @description The bill of lading number */
            bl_number: string;
            /** @description The type of the bill of lading document */
            bl_doc_type: components["schemas"]["BillOfLadingDocumentType"];
            /** @description Indicates if the request is to order. */
            to_order?: boolean;
            /** @description The port of loading. It's optional when draft is true. */
            pol: components["schemas"]["Location"];
            /** @description The port of discharge. It's optional when draft is true. */
            pod: components["schemas"]["Location"];
            /**
             * Format: date
             * @description The estimated time of arrival
             */
            eta?: string;
            /** @description The shipper of the eB/L. It's a DID of the business unit. It's optional when draft is true. */
            shipper: string;
            /** @description The consignee of the eB/L. It's a DID of the business unit. It's optional when draft is true. */
            consignee: string;
            /** @description The endorsee of the eB/L. It's a DID of the business unit. It's required when draft is false and to_order is true. */
            endorsee?: string;
            /** @description The release agent of the eB/L. It's a DID of the business unit. It's optional when draft is true. */
            release_agent: string;
            /** @description The notify parties of the eB/L. It's a DID of the business unit. It's required if to_order is true. */
            notify_parties?: string[];
            /** @description Any additional notes */
            note?: string;
            /** @description Indicates if the eB/L is a draft */
            draft: boolean;
            /**
             * @description Indicates if the content of the eB/L should be encrypted
             * @default false
             */
            encrypt_content: boolean;
        };
        TransferBillOfLadingRequest: components["schemas"]["BaseRequest"] & {
            /** @description The ID for authentication. The eB/L will be signed with the authentication. */
            authentication_id: string;
            /** @description Optional note from the requester */
            note?: string;
        };
        ReturnBillOfLadingRequest: components["schemas"]["BaseRequest"] & {
            /** @description The ID for authentication. The eB/L will be signed with the authentication. */
            authentication_id: string;
            /** @description Optional note from the requester */
            note?: string;
        };
        SurrenderBillOfLadingRequest: components["schemas"]["BaseRequest"] & {
            /** @description The ID for authentication. The eB/L will be signed with the authentication. */
            authentication_id: string;
            /** @description Optional note from the requester */
            note?: string;
        };
        AccomplishBillOfLadingRequest: components["schemas"]["BaseRequest"] & {
            /** @description The ID for authentication. The eB/L will be signed with the authentication. */
            authentication_id: string;
            /** @description Optional note from the requester */
            note?: string;
        };
        PrintToPaperBillOfLadingRequest: components["schemas"]["BaseRequest"] & {
            /** @description The ID for authentication. The eB/L will be signed with the authentication. */
            authentication_id?: string;
            /** @description Optional note from the requester */
            note?: string;
        };
        AmendmentRequestBillOfLadingRequest: components["schemas"]["BaseRequest"] & {
            /** @description The ID for authentication. The eB/L will be signed with the authentication. */
            authentication_id: string;
            /** @description Optional note from the requester */
            note: string;
        };
        AmendBillOfLadingRequest: components["schemas"]["BaseRequest"] & {
            /** @description The ID for authentication. The eB/L will be signed with the authentication. */
            authentication_id: string;
            /** @description The file associated with the request */
            file: components["schemas"]["File"];
            /** @description The bill of lading number */
            bl_number: string;
            /** @description The port of loading. It's optional when draft is true. */
            pol: components["schemas"]["Location"];
            /** @description The port of discharge. It's optional when draft is true. */
            pod: components["schemas"]["Location"];
            /**
             * Format: date
             * @description Estimate time of arrival
             */
            eta?: string;
            /** @description Optional note from the requester */
            note?: string;
        };
        DeleteBillOfLadingRequest: components["schemas"]["BaseRequest"] & {
            /** @description The ID for authentication. The eB/L will be signed with the authentication. */
            authentication_id: string;
            /** @description Optional note from the requester */
            note?: string;
        };
        UpdateWebhookRequest: {
            /** @description User who makes the request */
            requester: string;
            /** @description The URL that should have WebhookEvent issued to it */
            url: string;
            events: components["schemas"]["WebhookEventType"][];
            /** @description Secret key used to create a hash signature that's sent to the url with each payload */
            secret: string;
        };
        /**
         * Address
         * @description An object for storing address related information
         *
         */
        Address: {
            /**
             * @description The name of the street.
             * @example Ruijggoordweg
             */
            street: string;
            /**
             * @description The number of the street.
             * @example 100
             */
            streetNumber?: string;
            /**
             * @description The floor of the street number.
             *
             * @example N/A
             */
            floor?: string;
            /**
             * @description The post code of the address.
             * @example 1047 HM
             */
            postCode?: string;
            /**
             * @description A numbered box at a post office where a person or business can have mail or parcels delivered.
             * @example 123
             */
            POBox?: string;
            /**
             * @description The name of the city.
             *
             * @example Amsterdam
             */
            city: string;
            /**
             * @description The name of the state/region.
             * @example North Holland
             */
            stateRegion?: string;
            /**
             * @description The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             *
             * @example NL
             */
            countryCode: string;
        };
        /**
         * Facility
         * @description An object used to express a location using a `Facility`. The facility can be expressed using one of `BIC` code or `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
         *
         */
        Facility: {
            /**
             * @description The code used for identifying the specific facility. This code does not include the UN Location Code.
             *     The definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:
             *     - `SMDG` (the codeList used is the [SMDG Terminal Code List](https://smdg.org/documents/smdg-code-lists/))
             *     - `BIC` (the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/))
             * @example ADT
             */
            facilityCode: string;
            /**
             * @description The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`
             *     - `BIC` (Requires a UN Location Code)
             *     - `SMDG` (Requires a UN Location Code)
             *
             * @example SMDG
             * @enum {string}
             */
            facilityCodeListProvider: "BIC" | "SMDG";
        };
        /**
         * Geo Coordinate
         * @description An object used to express a location using `latitude` and `longitude`.
         *
         */
        GeoCoordinate: {
            /**
             * @description Geographic coordinate that specifies the north–south position of a point on the Earth's surface.
             * @example 48.8585500
             */
            latitude: string;
            /**
             * @description Geographic coordinate that specifies the east–west position of a point on the Earth's surface.
             * @example 2.294492036
             */
            longitude: string;
        };
        /**
         * Place of Receipt
         * @description An object to capture `Place of Receipt` location specified as: the location where the cargo is handed over by the shipper, or his agent, to the shipping line. This indicates the point at which the shipping line takes on responsibility for carriage of the container.
         *
         *     **Condition:** Only when pre-carriage is done by the carrier.
         *
         *     The location can be specified in **any** of the following ways: `UN Location Code`, `Facility`, `Address` or a `Geo Coordinate`.
         *
         *     **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
         *
         * @example {
         *       "locationName": "Hamburg",
         *       "UNLocationCode": "DEHAM"
         *     }
         */
        PlaceOfReceipt: {
            /**
             * @description The name of the location.
             * @example Port of Amsterdam
             */
            locationName?: string;
            address?: components["schemas"]["Address"];
            facility?: components["schemas"]["Facility"];
            /**
             * @description The UN Location code specifying where the place is located. The pattern used must be
             *
             *     - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             *     - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
             *
             *     More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
             *
             * @example NLAMS
             */
            UNLocationCode?: string;
            geoCoordinate?: components["schemas"]["GeoCoordinate"];
        };
        /**
         * City
         * @description An object for storing city, state/region and country related information
         *
         */
        City: {
            /**
             * @description The name of the city.
             *
             * @example Amsterdam
             */
            city: string;
            /**
             * @description The name of the state/region.
             *
             * @example North Holland
             */
            stateRegion?: string;
            /**
             * @description The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             *
             * @example NL
             */
            countryCode: string;
        };
        /**
         * Port of Loading
         * @description An object to capture `Port of Loading` location specified as: the location where the cargo is loaded onto a first sea-going vessel for water transportation.
         *
         *     The location can be specified in **any** of the following ways: `UN Location Code` or `City and Country`.
         *
         *     **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `UN Location Code` and as a `City and Country`) that both ways point to the same location.
         *
         * @example {
         *       "locationName": "Hamburg",
         *       "UNLocationCode": "DEHAM"
         *     }
         */
        PortOfLoading: {
            /**
             * @description The name of the location.
             * @example Port of Amsterdam
             */
            locationName?: string;
            city?: components["schemas"]["City"];
            /**
             * @description The UN Location code specifying where the place is located. The pattern used must be
             *
             *     - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             *     - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
             *
             *     More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
             *
             * @example NLAMS
             */
            UNLocationCode?: string;
        };
        /**
         * Port of Discharge
         * @description An object to capture `Port of Discharge` location specified as: the location where the cargo is discharged from the last sea-going vessel.
         *
         *     The location can be specified in **any** of the following ways: `UN Location Code` or `City and Country`.
         *
         *     **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `UN Location Code` and as a `City and Country`) that both ways point to the same location.
         *
         * @example {
         *       "locationName": "Hamburg",
         *       "UNLocationCode": "DEHAM"
         *     }
         */
        PortOfDischarge: {
            /**
             * @description The name of the location.
             * @example Port of Amsterdam
             */
            locationName?: string;
            city?: components["schemas"]["City"];
            /**
             * @description The UN Location code specifying where the place is located. The pattern used must be
             *
             *     - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             *     - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
             *
             *     More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
             *
             * @example NLAMS
             */
            UNLocationCode?: string;
        };
        /**
         * Place of Delivery
         * @description An object to capture `Place of Delivery` location specified as: the location where the cargo is handed over to the consignee, or his agent, by the shipping line and where responsibility of the shipping line ceases.
         *
         *     **Condition:** Only when onward transport is done by the carrier
         *
         *     The location can be specified in **any** of the following ways: `UN Location Code`, `Facility`, `Address` or a `Geo Coordinate`.
         *
         *     **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
         *
         * @example {
         *       "locationName": "Hamburg",
         *       "UNLocationCode": "DEHAM"
         *     }
         */
        PlaceOfDelivery: {
            /**
             * @description The name of the location.
             * @example Port of Amsterdam
             */
            locationName?: string;
            address?: components["schemas"]["Address"];
            facility?: components["schemas"]["Facility"];
            /**
             * @description The UN Location code specifying where the place is located. The pattern used must be
             *
             *     - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             *     - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
             *
             *     More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
             *
             * @example NLAMS
             */
            UNLocationCode?: string;
            geoCoordinate?: components["schemas"]["GeoCoordinate"];
        };
        /**
         * Onward Inland Routing
         * @description An object to capture `Onward Inland Routing` location specified as the end location of the inland movement that takes place after the container(s) being delivered to the port of discharge/place of delivery for account and risk of merchant (merchant haulage).
         *
         *     The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.
         *
         *     **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
         *
         * @example {
         *       "locationName": "Hamburg",
         *       "UNLocationCode": "DEHAM"
         *     }
         */
        OnwardInlandRouting: {
            /**
             * @description The name of the location.
             * @example Port of Amsterdam
             */
            locationName?: string;
            address?: components["schemas"]["Address"];
            facility?: components["schemas"]["Facility"];
            /**
             * @description The UN Location code specifying where the place is located. The pattern used must be
             *
             *     - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             *     - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
             *
             *     More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
             *
             * @example NLAMS
             */
            UNLocationCode?: string;
        };
        /**
         * Vessel/Voyage
         * @description Vessel and export voyage
         */
        VesselVoyage: {
            /**
             * @description The name of the first sea going Vessel on board which the cargo is loaded or intended to be loaded
             *
             * @example King of the Seas
             */
            vesselName: string;
            /**
             * @description The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
             *
             * @example 2103S
             */
            carrierExportVoyageNumber: string;
            /**
             * @description A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
             *     - `2 digits` for the year
             *     - `2 alphanumeric characters` for the sequence number of the voyage
             *     - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
             *
             * @example 2103N
             */
            universalExportVoyageReference?: string;
        };
        /** Transports */
        Transports: {
            /**
             * Format: date
             * @description The planned date of arrival.
             *
             * @example 2024-06-07
             */
            plannedArrivalDate: string;
            /**
             * Format: date
             * @description The planned date of departure.
             *
             * @example 2024-06-03
             */
            plannedDepartureDate: string;
            /**
             * @description Mode of transportation for pre-carriage when transport to the port of loading is organized by the carrier. If this attributes is populated, then a Place of Receipt must also be defined. The currently supported values include:
             *     - `VESSEL` (Vessel)
             *     - `RAIL` (Rail)
             *     - `TRUCK` (Truck)
             *     - `BARGE` (Barge)
             *     - `MULTIMODAL` (if multiple modes are used)
             *
             * @example RAIL
             */
            preCarriageBy?: string;
            /**
             * @description Mode of transportation for on-carriage when transport from the port of discharge is organized by the carrier. If this attributes is populated, then a Place of Delivery must also be defined. The currently supported values include:
             *     - `VESSEL` (Vessel)
             *     - `RAIL` (Rail)
             *     - `TRUCK` (Truck)
             *     - `BARGE` (Barge)
             *     - `MULTIMODAL` (if multiple modes are used)
             *
             * @example TRUCK
             */
            onCarriageBy?: string;
            placeOfReceipt?: components["schemas"]["PlaceOfReceipt"];
            portOfLoading: components["schemas"]["PortOfLoading"];
            portOfDischarge: components["schemas"]["PortOfDischarge"];
            placeOfDelivery?: components["schemas"]["PlaceOfDelivery"];
            onwardInlandRouting?: components["schemas"]["OnwardInlandRouting"];
            /** @description Allow the possibility to include multiple vessels/voyages in the `Transport Document` (e.g. the first sea going vessel and the mother vessel). At least one is mandatory to provide.
             *      */
            vesselVoyages: components["schemas"]["VesselVoyage"][];
        };
        /**
         * Charge
         * @description Addresses the monetary value of freight and other service charges for a `Booking`.
         *
         */
        Charge: {
            /**
             * @description Free text field describing the charge to apply
             *
             * @example Documentation fee - Destination
             */
            chargeName: string;
            /**
             * Format: float
             * @description The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.
             *
             * @example 1012.12
             */
            currencyAmount: number;
            /**
             * @description The currency for the charge, using a 3-character code ([ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)).
             *
             * @example DKK
             */
            currencyCode: string;
            /**
             * @description An indicator of whether a charge is prepaid (PRE) or collect (COL). When prepaid, the charge is the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charge is the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
             *
             *     - `PRE` (Prepaid)
             *     - `COL` (Collect)
             *
             * @example PRE
             * @enum {string}
             */
            paymentTermCode: "PRE" | "COL";
            /**
             * @description The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.
             *
             * @example Per day
             */
            calculationBasis: string;
            /**
             * Format: float
             * @description The unit price of this charge item in the currency of the charge.
             *
             * @example 3456.6
             */
            unitPrice: number;
            /**
             * Format: float
             * @description The amount of unit for this charge item.
             *
             * @example 34.4
             */
            quantity: number;
        };
        /**
         * Place of Issue
         * @description An object to capture where the original Transport Document (`Bill of Lading`) will be issued.
         *
         *     **Condition:** The location can be specified as one of `UN Location Code` or `CountryCode`, but not both.
         *
         */
        PlaceOfIssue: {
            /**
             * @description The name of the location.
             * @example Port of Amsterdam
             */
            locationName?: string;
        } & ({
            /**
             * @description The UN Location code specifying where the place is located. The pattern used must be
             *
             *     - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             *     - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
             *
             *     More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
             * @example NLAMS
             */
            UNLocationCode: string;
        } | {
            /**
             * @description The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             *
             * @example NL
             */
            countryCode: string;
        });
        /**
         * Invoice Payable At
         * @description Location where payment of ocean freight and charges for the main transport will take place by the customer.
         *
         *     The location can be provided as a `UN Location Code` or as a fallback - a `freeText` field
         *
         */
        InvoicePayableAt: {
            /**
             * @description The UN Location code specifying where the place is located. The pattern used must be
             *
             *     - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             *     - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
             *
             *     More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
             * @example NLAMS
             */
            UNLocationCode: string;
        } | {
            /**
             * @description The name of the location where payment will be rendered by the customer.
             *
             * @example DCSA Headquarters
             */
            freeText: string;
        };
        /**
         * Party Contact Detail
         * @description The contact details of the person to contact. It is mandatory to provide either `phone` and/or `email` along with the `name`, both can be provided.
         *
         * @example {
         *       "name": "Henrik",
         *       "phone": "+45 51801234"
         *     }
         */
        PartyContactDetail: {
            /**
             * @description Name of the contact
             *
             * @example Henrik
             */
            name: string;
        } | {
            /**
             * @description Phone number for the contact. Phone **MUST** include an international phone number format as defined in the [ITU-T recommendation E.123](https://www.itu.int/rec/T-REC-E.123/en).
             *
             * @example +45 70262970
             */
            phone: string;
        } | {
            /**
             * @description `E-mail` address to be used
             *
             * @example info@dcsa.org
             */
            email: string;
        };
        /**
         * Party Address
         * @description Address where the party is located. It is an object of the attributes below.
         *
         */
        PartyAddress: {
            /**
             * @description The name of the street of the party’s address.
             * @example Ruijggoordweg
             */
            street: string;
            /**
             * @description The number of the street of the party’s address.
             * @example 100
             */
            streetNumber?: string;
            /**
             * @description The floor of the party’s street number.
             *
             * @example 2nd
             */
            floor?: string;
            /**
             * @description The post code of the party’s address.
             * @example 1047 HM
             */
            postCode?: string;
            /**
             * @description A numbered box at a post office where a person or business can have mail or parcels delivered.
             * @example 123
             */
            POBox?: string;
            /**
             * @description The city name of the party’s address.
             *
             * @example Amsterdam
             */
            city: string;
            /**
             * @description The UN Location code specifying where the carrier booking office is located. The pattern used must be
             *     - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             *     - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
             *     More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
             *
             * @example NLAMS
             */
            UNLocationCode?: string;
            /**
             * @description The state/region of the party’s address.
             * @example North Holland
             */
            stateRegion?: string;
            /**
             * @description The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             *
             * @example NL
             */
            countryCode: string;
        };
        /** Identifying Code */
        IdentifyingCode: {
            /**
             * @description A list of codes identifying a party. Possible values are:
             *     - `WAVE` (Wave)
             *     - `CARX` (CargoX)
             *     - `ESSD` (EssDOCS)
             *     - `IDT` (ICE Digital Trade)
             *     - `BOLE` (Bolero)
             *     - `EDOX` (EdoxOnline)
             *     - `IQAX` (IQAX)
             *     - `SECR` (Secro)
             *     - `TRGO` (TradeGO)
             *     - `ETEU` (eTEU)
             *     - `TRAC` (Enigio trace:original)
             *     - `BRIT` (BRITC eBL)
             *     - `GSBN` (Global Shipping Business Network)
             *     - `WISE` (WiseTech)
             *     - `GLEIF` (Global Legal Entity Identifier Foundation)
             *     - `W3C` (World Wide Web Consortium)
             *     - `DNB` (Dun and Bradstreet)
             *     - `FMC` (Federal Maritime Commission)
             *     - `DCSA` (Digital Container Shipping Association)
             *     - `ZZZ` (Mutually defined)
             *
             * @example W3C
             */
            codeListProvider: string;
            /**
             * @description Code to identify the party as provided by the code list provider
             *
             * @example MSK
             */
            partyCode: string;
            /**
             * @description The name of the code list, code generation mechanism or code authority for the `partyCode`. Example values could be:
             *     - `DID` (Decentralized Identifier) for `codeListProvider` `W3C`
             *     - `LEI` (Legal Entity Identifier) for `codeListProvider` `GLEIF`
             *     - `DUNS` (Data Universal Numbering System) for `codeListProvider` `DNB`
             *
             * @example DID
             */
            codeListName?: string;
        };
        /**
         * Tax & Legal Reference
         * @description Reference that uniquely identifies a party for tax and/or legal purposes in accordance with the relevant jurisdiction.
         *
         *     A small list of **potential** examples:
         *
         *     | Type  | Country | Description |
         *     |-------|:-------:|-------------|
         *     |EORI|NL|Economic Operators Registration and Identification|
         *     |PAN|IN|Goods and Services Tax Identification Number in India|
         *     |GSTIN|IN|Goods and Services Tax Identification Number in India|
         *     |IEC|IN|Importer-Exported Code in India|
         *     |RUC|EC|Registro Único del Contribuyente in Ecuador|
         *     |RUC|PE|Registro Único del Contribuyente in Peru|
         *     |NIF|MG|Numéro d'Identification Fiscal in Madagascar|
         *     |NIF|DZ|Numéro d'Identification Fiscal in Algeria|
         *
         */
        TaxLegalReference: {
            /**
             * @description The reference type code as defined by the relevant tax and/or legal authority.
             *
             * @example PAN
             */
            type: string;
            /**
             * @description The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             *
             * @example IN
             */
            countryCode: string;
            /**
             * @description The value of the `taxLegalReference`
             *
             * @example AAAAA0000A
             */
            value: string;
        };
        /**
         * Shipper
         * @description The party by whom or in whose name or on whose behalf a contract of carriage of goods by sea has been concluded with a carrier, or the party by whom or in whose name, or on whose behalf, the goods are actually delivered to the carrier in relation to the contract of carriage by sea.
         *
         *     **Condition:** Either the `address` or a party `identifyingCode` must be provided in the `Shipping Instructions`. If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
         *
         */
        Shipper: {
            /**
             * @description Name of the party.
             *
             * @example IKEA Denmark
             */
            partyName: string;
            /**
             * @description Can be one of the following values as per the Union Customs Code art. 5(4):
             *     - `NATURAL_PERSON` (A person that is an individual living human being)
             *     - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
             *     - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
             *
             * @example NATURAL_PERSON
             */
            typeOfPerson?: string;
            address?: components["schemas"]["PartyAddress"];
            /** @description The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.
             *
             *     **Conditions:** If provided:
             *       - the displayed address must be included in the `Transport Document`.
             *       - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters
             *       - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters
             *       - the order of the items in this array **MUST** be preserved as by the provider of the API.
             *      */
            displayedAddress?: string[];
            /** @description **Condition:** Either the `address` or a party `identifyingCode` must be provided.
             *      */
            identifyingCodes?: components["schemas"]["IdentifyingCode"][];
            /** @description A list of `Tax References` for a `Party`
             *      */
            taxLegalReferences?: components["schemas"]["TaxLegalReference"][];
            /** @description A list of contact details
             *      */
            partyContactDetails?: components["schemas"]["PartyContactDetail"][];
            /**
             * @description A reference linked to the `Shipper`.
             *
             * @example HHL007
             */
            reference?: string;
            /** @description A list of `Purchase Order Reference`s linked to the `Shipper`.
             *      */
            purchaseOrderReferences?: string[];
        };
        /**
         * Consignee
         * @description The party to which goods are consigned in the `Master Bill of Lading`.
         *
         *     **Condition:** Mandatory for non-negotiable BL (`isToOrder=false`)
         *
         *     **Condition:** If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
         *
         */
        Consignee: {
            /**
             * @description Name of the party.
             *
             * @example IKEA Denmark
             */
            partyName: string;
            /**
             * @description Can be one of the following values as per the Union Customs Code art. 5(4):
             *     - `NATURAL_PERSON` (A person that is an individual living human being)
             *     - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
             *     - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
             *
             * @example NATURAL_PERSON
             */
            typeOfPerson?: string;
            address?: components["schemas"]["PartyAddress"];
            /** @description The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.
             *
             *     **Conditions:** If provided:
             *       - the displayed address must be included in the `Transport Document`.
             *       - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters
             *       - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters
             *       - the order of the items in this array **MUST** be preserved as by the provider of the API.
             *      */
            displayedAddress?: string[];
            identifyingCodes: components["schemas"]["IdentifyingCode"][];
            /** @description A list of `Tax References` for a `Party`
             *      */
            taxLegalReferences?: components["schemas"]["TaxLegalReference"][];
            /** @description A list of contact details
             *      */
            partyContactDetails?: components["schemas"]["PartyContactDetail"][];
            /**
             * @description A reference linked to the `Consignee`.
             *
             * @example HHL007
             */
            reference?: string;
            /** @description A list of `Purchase Order Reference`s linked to the `Consignee`.
             *      */
            purchaseOrderReferences?: string[];
        };
        /**
         * Endorsee
         * @description The party to whom the title to the goods is transferred by means of endorsement.
         *
         *     **Condition:** Can only be provided for negotiable BLs (`isToOrder=true`). If a negotiable BL does not have an `Endorsee`, the BL is said to be "blank endorsed". Note `Consignee` and `Endorsee` are mutually exclusive.
         *
         *     **Condition:** If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
         *
         */
        Endorsee: {
            /**
             * @description Name of the party.
             *
             * @example IKEA Denmark
             */
            partyName: string;
            address?: components["schemas"]["PartyAddress"];
            /** @description The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.
             *
             *     **Conditions:** If provided:
             *       - the displayed address must be included in the `Transport Document`.
             *       - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters
             *       - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters
             *       - the order of the items in this array **MUST** be preserved as by the provider of the API.
             *      */
            displayedAddress?: string[];
            identifyingCodes: components["schemas"]["IdentifyingCode"][];
            /** @description A list of `Tax References` for a `Party`
             *      */
            taxLegalReferences?: components["schemas"]["TaxLegalReference"][];
            /** @description A list of contact details
             *      */
            partyContactDetails?: components["schemas"]["PartyContactDetail"][];
        };
        /**
         * Issuing Party
         * @description The company or a legal entity issuing the `Transport Document`.
         *
         */
        IssuingParty: {
            /**
             * @description Name of the party.
             *
             * @example Asseco Denmark
             */
            partyName: string;
            address: components["schemas"]["PartyAddress"];
            identifyingCodes?: components["schemas"]["IdentifyingCode"][];
            /** @description A list of `Tax References` for a `Party`
             *      */
            taxLegalReferences?: components["schemas"]["TaxLegalReference"][];
            /** @description A list of contact details
             *      */
            partyContactDetails?: components["schemas"]["PartyContactDetail"][];
        };
        /**
         * Carrier's Agent At Destination
         * @description The party on the import side assigned by the carrier to whom the customer need to reach out to for cargo release.
         *
         */
        CarriersAgentAtDestination: {
            /**
             * @description Name of the party.
             *
             * @example IKEA Denmark
             */
            partyName: string;
            address: components["schemas"]["Address"];
            /** @description A list of contact details
             *      */
            partyContactDetails: components["schemas"]["PartyContactDetail"][];
        };
        /**
         * Notify Party
         * @description The person to be notified when a shipment arrives at its destination.
         *
         *     **Condition:** Either the `address` or a party `identifyingCode` must be provided in the `Shipping Instructions`. If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
         *
         */
        NotifyParty: {
            /**
             * @description Name of the party.
             *
             * @example IKEA Denmark
             */
            partyName: string;
            /**
             * @description Can be one of the following values as per the Union Customs Code art. 5(4):
             *     - `NATURAL_PERSON` (A person that is an individual living human being)
             *     - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
             *     - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
             *
             * @example NATURAL_PERSON
             */
            typeOfPerson?: string;
            address?: components["schemas"]["PartyAddress"];
            /** @description The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.
             *
             *     **Conditions:** If provided:
             *       - the displayed address must be included in the `Transport Document`.
             *       - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters
             *       - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters
             *       - the order of the items in this array **MUST** be preserved as by the provider of the API.
             *      */
            displayedAddress?: string[];
            /** @description **Condition:** Either the `address` or a party `identifyingCode` must be provided.
             *      */
            identifyingCodes?: components["schemas"]["IdentifyingCode"][];
            /** @description A list of `Tax References` for a `Party`
             *      */
            taxLegalReferences?: components["schemas"]["TaxLegalReference"][];
            /** @description A list of contact details
             *      */
            partyContactDetails?: components["schemas"]["PartyContactDetail"][];
            /**
             * @description A reference linked to the `NotifyParty`.
             *
             * @example HHL007
             */
            reference?: string;
        };
        /**
         * Party
         * @description Refers to a company or a legal entity.
         *
         *     **Condition:** Either the `address` or a party `identifyingCode` must be provided in the `Shipping Instructions`.
         *
         */
        Party: {
            /**
             * @description Name of the party.
             *
             * @example Asseco Denmark
             */
            partyName: string;
            address?: components["schemas"]["PartyAddress"];
            /** @description **Condition:** Either the `address` or a party `identifyingCode` must be provided.
             *      */
            identifyingCodes?: components["schemas"]["IdentifyingCode"][];
            /** @description A list of `Tax References` for a `Party`
             *      */
            taxLegalReferences?: components["schemas"]["TaxLegalReference"][];
            /** @description A list of contact details
             *      */
            partyContactDetails?: components["schemas"]["PartyContactDetail"][];
            /**
             * @description A reference linked to the `Party`.
             *
             * @example HHL007
             */
            reference?: string;
        };
        /**
         * Other Document Party
         * @description A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.
         *
         */
        OtherDocumentParty: {
            party: components["schemas"]["Party"];
            /**
             * @description Specifies the role of the party in a given context. Possible values are:
             *
             *     - `SCO` (Service Contract Owner)
             *     - `DDR` (Consignor's freight forwarder)
             *     - `DDS` (Consignee's freight forwarder)
             *     - `COW` (Invoice payer on behalf of the consignor (shipper))
             *     - `COX` (Invoice payer on behalf of the consignee)
             *     - `CS` (Consolidator)
             *     - `MF` (Manufacturer)
             *     - `WH` (Warehouse Keeper)
             *
             * @example DDS
             */
            partyFunction: string;
        };
        /**
         * Document Parties
         * @description All `Parties` with associated roles.
         *
         */
        DocumentParties: {
            shipper: components["schemas"]["Shipper"];
            consignee?: components["schemas"]["Consignee"];
            endorsee?: components["schemas"]["Endorsee"];
            issuingParty: components["schemas"]["IssuingParty"];
            carriersAgentAtDestination?: components["schemas"]["CarriersAgentAtDestination"];
            /** @description List of up to 3 `Notify Parties`. The first item in the list is the **First Notify Party** (`N1`), the second item is the **Second Notify Party** (`N2`) and the last item is the **Other Notify Party** (`NI`).
             *
             *     **Condition:** If provided:
             *       - Mandatory for To Order BLs, `isToOrder=true`
             *       - The order of the items in this array **MUST** be preserved as by the provider of the API.
             *      */
            notifyParties?: components["schemas"]["NotifyParty"][];
            /** @description A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`. */
            other?: components["schemas"]["OtherDocumentParty"][];
        };
        /**
         * National Commodity Code
         * @description The national commodity classification code linked to a country with a value.
         *
         *     An example could look like this:
         *
         *     | Type  | Country | Value |
         *     |-------|:-------:|-------------|
         *     |NCM|BR|['1515', '2106', '2507', '2512']|
         *
         * @example {
         *       "type": "TARIC",
         *       "values": [
         *         "85171200"
         *       ]
         *     }
         */
        NationalCommodityCode: {
            /**
             * @description The national commodity classification code, which can be one of the following values defined by DCSA:
             *     - `NCM` (Nomenclatura Comum do Mercosul)
             *     - `HTS` (Harmonized Tariff Schedule)
             *     - `SCHEDULE_B` ( Schedule B)
             *     - `TARIC` (Integrated Tariff of the European Communities)
             *     - `CN` (Combined Nomenclature)
             *     - `CUS` (Customs Union and Statistics)
             *
             * @example NCM
             */
            type: string;
            /**
             * @description The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             *
             * @example BR
             */
            countryCode?: string;
            /**
             * @description A list of `national commodity codes` values.
             *
             * @example [
             *       "1515",
             *       "2106",
             *       "2507",
             *       "2512"
             *     ]
             */
            values: string[];
        };
        /**
         * Cargo Gross Weight
         * @description The weight of the cargo item including packaging being carried in the container. Excludes the tare weight of the container.
         *
         */
        CargoGrossWeight: {
            /**
             * Format: float
             * @description The weight of the cargo item including packaging being carried in the container. Excludes the tare weight of the container. A maximum of 3 decimals should be provided.
             *
             * @example 2400
             */
            value: number;
            /**
             * @description The unit of measure which can be expressed in imperial or metric terms:
             *     - `KGM` (Kilograms)
             *     - `LBR` (Pounds)
             *
             * @example KGM
             * @enum {string}
             */
            unit: "KGM" | "LBR";
        };
        /**
         * Cargo Gross Volume
         * @description Calculated by multiplying the width, height, and length of the packed cargo.
         *
         */
        CargoGrossVolume: {
            /**
             * Format: float
             * @description Calculated by multiplying the width, height, and length of the packed cargo. A maximum of 4 decimals should be provided.
             *
             * @example 2.4
             */
            value: number;
            /**
             * @description The unit of measure which can be expressed in imperial or metric terms:
             *     - `FTQ` (Cubic foot)
             *     - `MTQ` (Cubic meter)
             *
             * @example MTQ
             * @enum {string}
             */
            unit: "MTQ" | "FTQ";
        };
        /**
         * Cargo Net Weight
         * @description The weight of the cargo item excluding packaging being carried in the container. Excludes the tare weight of the container.
         *
         */
        CargoNetWeight: {
            /**
             * Format: float
             * @description The weight of the cargo item excluding packaging being carried in the container. Excludes the tare weight of the container. A maximum of 3 decimals should be provided.
             *
             * @example 2400
             */
            value: number;
            /**
             * @description The unit of measure which can be expressed in imperial or metric terms:
             *     - `KGM` (Kilograms)
             *     - `LBR` (Pounds)
             *
             * @example KGM
             * @enum {string}
             */
            unit: "KGM" | "LBR";
        };
        /**
         * Cargo Net Volume
         * @description Calculated by multiplying the width, height, and length of the cargo, excluding packaging.
         *
         */
        CargoNetVolume: {
            /**
             * Format: float
             * @description Calculated by multiplying the width, height, and length of the cargo, excluding packaging.
             *
             * @example 2.4
             */
            value: number;
            /**
             * @description The unit of measure which can be expressed in imperial or metric terms:
             *     - `FTQ` (Cubic foot)
             *     - `MTQ` (Cubic meter)
             *
             * @example MTQ
             * @enum {string}
             */
            unit: "MTQ" | "FTQ";
        };
        /**
         * Export License
         * @description `Export License` requirements
         *
         *     **Condition:** Included if the property is provided in the `Shipping Instructions.`
         *
         */
        ExportLicense: {
            /**
             * @description Information provided by the shipper to indicate whether an `Export License` or permit is required for this shipment/commodity/destination.
             *
             *     **Note:** If this property is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
             *
             * @example true
             */
            isRequired?: boolean;
            /**
             * @description Reference number assigned to an `Export License` or permit, which authorizes a business or individual to export specific goods to specific countries under defined conditions. It is a permit that is required when shipping certain restricted or controlled goods, such as military equipment, high-tech items, chemicals, or items subject to international regulations. The `Export License` must be valid at time of departure.
             *
             * @example EMC007123
             */
            reference?: string;
            /**
             * Format: date
             * @description Issue date of the `Export License`.
             *
             * @example 2024-09-14
             */
            issueDate?: string;
            /**
             * Format: date
             * @description Expiry date of the `Export License`.
             *
             * @example 2024-09-21
             */
            expiryDate?: string;
        };
        /**
         * Import License
         * @description `Import License` requirements
         *
         *     **Condition:** Included if the property is provided in the `Shipping Instructions.`
         *
         */
        ImportLicense: {
            /**
             * @description Information provided by the shipper to indicate whether an `Import License` or permit is required for this shipment/commodity/destination.
             *
             *     **Note:** If this property is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
             *
             * @example true
             */
            isRequired?: boolean;
            /**
             * @description Reference number assigned to an `Import License` or permit, issued by countries exercising import controls that authorizes the importation of the articles stated in the license. The `Import License` must be valid at time of arrival.
             *
             * @example EMC007123
             */
            reference?: string;
            /**
             * Format: date
             * @description Issue date of the `Import License`.
             *
             * @example 2024-09-14
             */
            issueDate?: string;
            /**
             * Format: date
             * @description Expiry date of the `Import License`.
             *
             * @example 2024-09-21
             */
            expiryDate?: string;
        };
        /**
         * Inner Packaging
         * @description Object for inner packaging specification
         *
         */
        InnerPackaging: {
            /**
             * Format: int32
             * @description Count of `Inner Packagings` of the referenced `Dangerous Goods`.
             *
             * @example 20
             */
            quantity: number;
            /**
             * @description The `material` used for the `Inner Packaging` of the referenced `Dangerous Goods`.
             *
             * @example Plastic
             */
            material: string;
            /**
             * @description Description of the packaging.
             *
             * @example Woven plastic water resistant Bag
             */
            description: string;
        };
        /**
         * Emergency Contact Details
         * @description 24 hr emergency contact details
         *
         */
        EmergencyContactDetails: {
            /**
             * @description Name of the Contact person during an emergency.
             *
             * @example Henrik Larsen
             */
            contact: string;
            /**
             * @description Name of the third party vendor providing emergency support
             *
             * @example GlobeTeam
             */
            provider?: string;
            /**
             * @description Phone number for the contact. Phone **MUST** include an international phone number format as defined in the [ITU-T recommendation E.123](https://www.itu.int/rec/T-REC-E.123/en).
             *
             * @example +45 70262970
             */
            phone: string;
            /**
             * @description Contract reference for the emergency support provided by an external third party vendor.
             *
             * @example 12234
             */
            referenceNumber?: string;
        };
        /**
         * Gross Weight
         * @description Total weight of the goods carried, including packaging.
         *
         */
        GrossWeight: {
            /**
             * Format: float
             * @description The grand total weight of the DG cargo and weight per `UNNumber`/`NANumber` including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.
             *
             * @example 12000.3
             */
            value: number;
            /**
             * @description The unit of measure which can be expressed in imperial or metric terms:
             *     - `KGM` (Kilograms)
             *     - `LBR` (Pounds)
             *
             * @example KGM
             * @enum {string}
             */
            unit: "KGM" | "LBR";
        };
        /**
         * Net Weight
         * @description Total weight of the goods carried, excluding packaging.
         *
         */
        NetWeight: {
            /**
             * Format: float
             * @description Total weight of the goods carried, excluding packaging.
             *
             * @example 2.4
             */
            value: number;
            /**
             * @description The unit of measure which can be expressed in imperial or metric terms:
             *     - `KGM` (Kilograms)
             *     - `LBR` (Pounds)
             *
             * @example KGM
             * @enum {string}
             */
            unit: "KGM" | "LBR";
        };
        /**
         * Net Explosive Content
         * @description The total weight of the explosive substances, without the packaging’s, casings, etc.
         *
         */
        NetExplosiveContent: {
            /**
             * Format: float
             * @description The total weight of the explosive substances, without the packaging’s, casings, etc.
             *
             * @example 2.4
             */
            value: number;
            /**
             * @description The unit of measure which can be expressed in imperial or metric terms:
             *     - `KGM` (Kilograms)
             *     - `LBR` (Pounds)
             *     - `GRM` (Grams)
             *     - `ONZ` (Ounce)
             *
             * @example KGM
             * @enum {string}
             */
            unit: "KGM" | "LBR" | "GRM" | "ONZ";
        };
        /**
         * Net Volume
         * @description The volume of the referenced dangerous goods.
         *
         *     **Condition:** only applicable to liquids and gas.
         *
         */
        NetVolume: {
            /**
             * Format: float
             * @description The volume of the referenced dangerous goods.
             *
             * @example 2.4
             */
            value: number;
            /**
             * @description The unit of measure which can be expressed in imperial or metric terms:
             *     - `FTQ` (Cubic foot)
             *     - `MTQ` (Cubic meter)
             *     - `LTR` (Litre)
             *
             * @example MTQ
             * @enum {string}
             */
            unit: "MTQ" | "FTQ" | "LTR";
        };
        /**
         * Limits
         * @description Limits for the `Dangerous Goods`. The same `Temperature Unit` needs to apply to all attributes in this structure.
         *
         */
        Limits: {
            /**
             * @description The unit for **all attributes in the limits structure** in Celsius or Fahrenheit
             *
             *     - `CEL` (Celsius)
             *     - `FAH` (Fahrenheit)
             *
             * @example CEL
             * @enum {string}
             */
            temperatureUnit: "CEL" | "FAH";
            /**
             * Format: float
             * @description Lowest temperature at which a chemical can vaporize to form an ignitable mixture in air.
             *
             *     **Condition:** only applicable to specific hazardous goods according to the IMO IMDG Code.
             *
             * @example 42
             */
            flashPoint?: number;
            /**
             * Format: float
             * @description Maximum temperature at which certain substance (such as organic peroxides and self-reactive and related substances) can be safely transported for a prolonged period.
             *
             * @example 24.1
             */
            transportControlTemperature?: number;
            /**
             * Format: float
             * @description Temperature at which emergency procedures shall be implemented
             *
             * @example 74.1
             */
            transportEmergencyTemperature?: number;
            /**
             * Format: float
             * @description Lowest temperature in which self-accelerating decomposition may occur in a substance
             *
             * @example 54.1
             */
            SADT?: number;
            /**
             * Format: float
             * @description Lowest temperature in which self-accelerating polymerization may occur in a substance
             *
             * @example 70
             */
            SAPT?: number;
        };
        /**
         * Dangerous Goods
         * @description Specification for `Dangerous Goods`. It is mandatory to provide one of `UNNumber` or `NANumber`. Dangerous Goods is based on **IMDG Amendment Version 41-22**.
         *
         */
        DangerousGoods: {
            /**
             * @description Four-character code supplied by Exis Technologies that assists to remove ambiguities when identifying a variant within a single UN number or NA number that may occur when two companies exchange DG information.
             *
             *     Character | Valid Characters | Description
             *     :--------:|------------------|------------
             *     1| 0, 1, 2, 3|The packing group. Code 0 indicates there is no packing group
             *     2|0 to 9 and A to Z|A sequence letter for the PSN, or 0 if there were no alternative PSNs
             *     3 and 4|0 to 9 and A to Z|Two sequence letters for other information, for the cases where the variant is required because of different in subrisks, packing instruction etc.
             *
             * @example 2200
             */
            codedVariantList?: string;
            /**
             * @description The proper shipping name for goods under IMDG Code, or the product name for goods under IBC Code and IGC Code, or the bulk cargo shipping name for goods under IMSBC Code, or the name of oil for goods under Annex I to the MARPOL Convention.
             *
             * @example Chromium Trioxide, anhydrous
             */
            properShippingName: string;
            /**
             * @description The recognized chemical or biological name or other name currently used for the referenced dangerous goods as described in chapter 3.1.2.8 of the IMDG Code.
             *
             * @example xylene and benzene
             */
            technicalName?: string;
            /**
             * @description The hazard class code of the referenced dangerous goods according to the specified regulation. Examples of possible values are:
             *
             *     - `1.1A` (Substances and articles which have a mass explosion hazard)
             *     - `1.6N` (Extremely insensitive articles which do not have a mass explosion hazard)
             *     - `2.1` (Flammable gases)
             *     - `8` (Corrosive substances)
             *
             * @example 1.4S
             */
            imoClass: string;
            /**
             * @description Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.
             *
             * @example 1.2
             */
            subsidiaryRisk1?: string;
            /**
             * @description Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.
             *
             * @example 1.2
             */
            subsidiaryRisk2?: string;
            /**
             * @description Indicates if the goods belong to the classification of Marine Pollutant.
             *
             * @example false
             */
            isMarinePollutant?: boolean;
            /**
             * Format: int32
             * @description The packing group according to the UN Recommendations on the Transport of Dangerous Goods and IMO IMDG Code.
             *
             * @example 3
             */
            packingGroup?: number;
            /**
             * @description Indicates if the dangerous goods can be transported as limited quantity in accordance with Chapter 3.4 of the IMO IMDG Code.
             *
             * @example false
             */
            isLimitedQuantity?: boolean;
            /**
             * @description Indicates if the dangerous goods can be transported as excepted quantity in accordance with Chapter 3.5 of the IMO IMDG Code.
             *
             * @example false
             */
            isExceptedQuantity?: boolean;
            /**
             * @description Indicates if the cargo has special packaging for the transport, recovery or disposal of damaged, defective, leaking or nonconforming hazardous materials packages, or hazardous materials that have spilled or leaked.
             *
             * @example false
             */
            isSalvagePackings?: boolean;
            /**
             * @description Indicates if the cargo is residue.
             *
             * @example false
             */
            isEmptyUncleanedResidue?: boolean;
            /**
             * @description Indicates if waste is being shipped
             *
             * @example false
             */
            isWaste?: boolean;
            /**
             * @description Indicates if high temperature cargo is shipped.
             *
             * @example false
             */
            isHot?: boolean;
            /**
             * @description Indicates if the cargo require approval from authorities
             *
             * @example false
             */
            isCompetentAuthorityApprovalRequired?: boolean;
            /**
             * @description Name and reference number of the competent authority providing the approval.
             *
             * @example {Name and reference...}
             */
            competentAuthorityApproval?: string;
            /** @description List of the segregation groups applicable to specific hazardous goods according to the IMO IMDG Code.
             *
             *     **Condition:** only applicable to specific hazardous goods.
             *      */
            segregationGroups?: string[];
            /** @description A list of `Inner Packings` contained inside this `outer packaging/overpack`.
             *      */
            innerPackagings?: components["schemas"]["InnerPackaging"][];
            emergencyContactDetails?: components["schemas"]["EmergencyContactDetails"];
            /**
             * @description The emergency schedule identified in the IMO EmS Guide – Emergency Response Procedures for Ships Carrying Dangerous Goods. Comprises 2 values; 1 for spillage and 1 for fire. Possible values spillage: S-A to S-Z. Possible values fire: F-A to F-Z.
             *
             * @example F-A S-Q
             */
            EMSNumber?: string;
            /**
             * Format: date
             * @description Date by when the refrigerated liquid needs to be delivered.
             *
             * @example 2021-09-03
             */
            endOfHoldingTime?: string;
            /**
             * Format: date-time
             * @description Date & time when the container was fumigated
             *
             * @example 2024-09-04T09:41:00Z
             */
            fumigationDateTime?: string;
            /**
             * @description Indicates if a container of hazardous material is at the reportable quantity level. If `true`, a report to the relevant authority must be made in case of spill.
             *
             * @example false
             */
            isReportableQuantity?: boolean;
            /**
             * @description The zone classification of the toxicity of the inhalant. Possible values are:
             *
             *     - `A` (Hazard Zone A) can be assigned to specific gases and liquids
             *     - `B` (Hazard Zone B) can be assigned to specific gases and liquids
             *     - `C` (Hazard Zone C) can **only** be assigned to specific gases
             *     - `D` (Hazard Zone D) can **only** be assigned to specific gases
             *
             * @example A
             */
            inhalationZone?: string;
            grossWeight?: components["schemas"]["GrossWeight"];
            netWeight?: components["schemas"]["NetWeight"];
            netExplosiveContent?: components["schemas"]["NetExplosiveContent"];
            netVolume?: components["schemas"]["NetVolume"];
            limits?: components["schemas"]["Limits"];
        } & ({
            /**
             * @description United Nations Dangerous Goods Identifier (UNDG) assigned by the UN Sub-Committee of Experts on the Transport of Dangerous Goods and shown in the IMO IMDG.
             *
             * @example 1463
             */
            UNNumber: string;
        } | {
            /**
             * @description Four-digit number that is assigned to dangerous, hazardous, and harmful substances by the United States Department of Transportation.
             *
             * @example 9037
             */
            NANumber: string;
        });
        /**
         * Outer Packaging
         * @description Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.
         *
         */
        OuterPackaging: {
            /**
             * @description A code identifying the outer packaging/overpack. `PackageCode` must follow the codes specified in [Recommendation N°21](https://unece.org/trade/uncefact/cl-recommendations)
             *
             *     **Condition:** only applicable to dangerous goods if the `IMO packaging code` is not available.
             *
             * @example 5H
             */
            packageCode?: string;
            /**
             * @description The code of the packaging as per IMO.
             *
             *     **Condition:** only applicable to dangerous goods if specified in the [IMO IMDG code](https://www.imo.org/en/publications/Pages/IMDG%20Code.aspx). If not available, the `packageCode` as per UN recommendation 21 should be used.
             *
             * @example 1A2
             */
            imoPackagingCode?: string;
            /**
             * Format: int32
             * @description Specifies the number of outer packagings/overpacks associated with this `Cargo Item`.
             *
             * @example 18
             */
            numberOfPackages: number;
            /**
             * @description Description of the outer packaging/overpack.
             *
             * @example Drum, steel
             */
            description: string;
            /**
             * @description Property to clearly indicate if the products, packaging and any other items are made of wood. Possible values include:
             *     - `NOT_APPLICABLE` (if no wood or any other wood product such as packaging and supports are being shipped)
             *     - `NOT_TREATED_AND_NOT_CERTIFIED` (if the wood or wooden materials have not been treated nor fumigated and do not include a certificate)
             *     - `PROCESSED` (if the wood or wooden materials are entirely made of processed wood, such as plywood, particle board, sliver plates of wood and wood laminate sheets produced using glue, heat, pressure or a combination of these)
             *     - `TREATED_AND_CERTIFIED` (if the wood or wooden materials have been treated and/or fumigated and include a certificate)
             *
             * @example TREATED_AND_CERTIFIED
             */
            woodDeclaration?: string;
            /** @description A list of `Dangerous Goods`
             *      */
            dangerousGoods?: components["schemas"]["DangerousGoods"][];
        };
        /**
         * Customs Reference
         * @description Reference associated with customs and/or excise purposes required by the relevant authorities for the import, export, or transit of the goods.
         *
         *     A small list of **potential** examples:
         *
         *     | Type  | Country | Description |
         *     |-------|:-------:|-------------|
         *     |UCR|NL|Unique Consignment Reference|
         *     |CUS|NL|Customs Union and Statistics|
         *     |ACID|EG|Advance Cargo Information Declaration in Egypt|
         *     |CERS|CA|Canadian Export Reporting System|
         *     |ITN|US|Internal Transaction Number in US|
         *     |PEB|ID|PEB reference number|
         *     |CSN|IN|Cargo Summary Notification (CSN)|
         *
         */
        CustomsReference: {
            /**
             * @description The reference type code as defined in the relevant customs jurisdiction.
             *
             * @example CUS
             */
            type: string;
            /**
             * @description The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             *
             * @example NL
             */
            countryCode: string;
            values: string[];
        };
        /**
         * Cargo Item
         * @description A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.
         *
         */
        CargoItem: {
            /**
             * @description The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
             *     According to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).
             *
             *     If a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
             *
             * @example APZU4812090
             */
            equipmentReference: string;
            cargoGrossWeight: components["schemas"]["CargoGrossWeight"];
            cargoGrossVolume?: components["schemas"]["CargoGrossVolume"];
            cargoNetWeight?: components["schemas"]["CargoNetWeight"];
            cargoNetVolume?: components["schemas"]["CargoNetVolume"];
            exportLicense?: components["schemas"]["ExportLicense"];
            importLicense?: components["schemas"]["ImportLicense"];
            outerPackaging: components["schemas"]["OuterPackaging"];
            /** @description A list of `National Commodity Codes` that apply to this `cargoItem`
             *      */
            nationalCommodityCodes?: components["schemas"]["NationalCommodityCode"][];
            /** @description A list of `Customs references`
             *      */
            customsReferences?: components["schemas"]["CustomsReference"][];
        };
        /**
         * Reference (Consignment Item)
         * @description References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
         *
         */
        ReferenceConsignmentItem: {
            /**
             * @description The reference type codes defined by DCSA. Possible values are:
             *     - `CR` (Customer’s Reference)
             *     - `AKG` (Vehicle Identification Number)
             *     - `SPO` (Shipper's Purchase Order)
             *     - `CPO` (Consignee's Purchase Order)
             *
             * @example CR
             */
            type: string;
            /** @description List of `referenceValues` for a given `referenceType`.
             *      */
            values: string[];
        };
        /**
         * Consignment Item
         * @description Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`
         *
         */
        ConsignmentItem: {
            /**
             * @description The associated booking number provided by the carrier for this `Consignment Item`.
             *
             * @example ABC709951
             */
            carrierBookingReference: string;
            /** @description A plain language description that is precise enough for Customs services to be able to identify the goods. General terms (i.e. 'consolidated', 'general cargo' 'parts' or 'freight of all kinds') or not sufficiently precise description cannot be accepted.
             *
             *     **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
             *      */
            descriptionOfGoods: string[];
            /** @description A list of `HS Codes` that apply to this `consignmentItem`
             *      */
            HSCodes: string[];
            /** @description A list of `National Commodity Codes` that apply to this `commodity`
             *      */
            nationalCommodityCodes?: components["schemas"]["NationalCommodityCode"][];
            /** @description A list of the `ShippingMarks` applicable to this `consignmentItem`
             *
             *     **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
             *      */
            shippingMarks?: string[];
            /** @description A list of all `cargoItems`
             *      */
            cargoItems: components["schemas"]["CargoItem"][];
            exportLicense?: components["schemas"]["ExportLicense"];
            importLicense?: components["schemas"]["ImportLicense"];
            /** @description A list of `References`
             *      */
            references?: components["schemas"]["ReferenceConsignmentItem"][];
            /** @description A list of `Customs references`
             *      */
            customsReferences?: components["schemas"]["CustomsReference"][];
        };
        /**
         * Tare Weight
         * @description The weight of an empty container (gross container weight).
         *
         */
        TareWeight: {
            /**
             * Format: float
             * @description The weight of an empty container (gross container weight).
             *
             * @example 4800
             */
            value: number;
            /**
             * @description The unit of measure which can be expressed in imperial or metric terms
             *     - `KGM` (Kilograms)
             *     - `LBR` (Pounds)
             *
             * @example KGM
             * @enum {string}
             */
            unit: "KGM" | "LBR";
        };
        /**
         * Equipment
         * @description Used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' DRY Freight Container, but several different versions exist.
         *
         */
        Equipment: {
            /**
             * @description The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
             *     According to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).
             *
             *     If a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
             *
             * @example APZU4812090
             */
            equipmentReference: string;
            /**
             * @description Unique code for the different equipment size and type used to transport commodities. The code can refer to one of ISO size type (e.g. 22G1) or ISO type group (e.g. 22GP) following the [ISO 6346](https://www.iso.org/standard/83558.html) standard.
             *
             * @example 22G1
             */
            ISOEquipmentCode?: string;
            tareWeight?: components["schemas"]["TareWeight"];
        };
        /**
         * Active Reefer Settings
         * @description The specifications for a Reefer equipment.
         *
         *     **Condition:** Only applicable when `isNonOperatingReefer` is set to `false`
         *
         */
        ActiveReeferSettings: {
            /**
             * Format: float
             * @description Target value of the temperature for the Reefer based on the cargo requirement.
             *
             * @example -15
             */
            temperatureSetpoint?: number;
            /**
             * @description The unit for temperature in Celsius or Fahrenheit
             *
             *     - `CEL` (Celsius)
             *     - `FAH` (Fahrenheit)
             *
             *     **Condition:** Mandatory if `temperatureSetpoint` is provided. If `temperatureSetpoint` is not provided, this field must be empty.
             *
             * @example CEL
             * @enum {string}
             */
            temperatureUnit?: "CEL" | "FAH";
            /**
             * Format: float
             * @description The percentage of the controlled atmosphere O<sub>2</sub> target value
             *
             * @example 25
             */
            o2Setpoint?: number;
            /**
             * Format: float
             * @description The percentage of the controlled atmosphere CO<sub>2</sub> target value
             *
             * @example 25
             */
            co2Setpoint?: number;
            /**
             * Format: float
             * @description The percentage of the controlled atmosphere humidity target value
             *
             * @example 95.6
             */
            humiditySetpoint?: number;
            /**
             * Format: float
             * @description Target value for the air exchange rate which is the rate at which outdoor air replaces indoor air within a Reefer container
             *
             * @example 15.4
             */
            airExchangeSetpoint?: number;
            /**
             * @description The unit for `airExchange` in metrics- or imperial- units per hour
             *     - `MQH` (Cubic metre per hour)
             *     - `FQH` (Cubic foot per hour)
             *
             *     **Condition:** Mandatory if `airExchange` is provided. If `airExchange` is not provided, this field must be empty.
             *
             * @example MQH
             * @enum {string}
             */
            airExchangeUnit?: "MQH" | "FQH";
            /**
             * @description If `true` the ventilation orifice is `Open` - if `false` the ventilation orifice is `closed`
             *
             * @example true
             */
            isVentilationOpen?: boolean;
            /**
             * @description Is drain holes open on the container
             *
             * @example true
             */
            isDrainholesOpen?: boolean;
            /**
             * @description Is special container setting for handling flower bulbs active
             *
             * @example true
             */
            isBulbMode?: boolean;
            /**
             * @description Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD
             *
             * @example true
             */
            isColdTreatmentRequired?: boolean;
            /**
             * @description Indicator of whether cargo requires Controlled Atmosphere.
             *
             * @example true
             */
            isControlledAtmosphereRequired?: boolean;
        };
        /**
         * Seal
         * @description Addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This `Seal` is meant to stay on until the shipment equipment reaches its final destination.
         *
         */
        Seal: {
            /**
             * @description Identifies a seal affixed to the container.
             * @example VET123
             */
            number: string;
            /**
             * @description The source of the seal, namely who has affixed the seal.
             *     - `CAR` (Carrier)
             *     - `SHI` (Shipper)
             *     - `VET` (Veterinary)
             *     - `CUS` (Customs)
             *
             *     **Condition:** Seal source may be required depending on the type of commodity being shipped.
             *
             * @example CUS
             * @enum {string}
             */
            source?: "CAR" | "SHI" | "VET" | "CUS";
        };
        /**
         * Reference
         * @description References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
         *
         */
        Reference: {
            /**
             * @description The reference type codes defined by DCSA. Possible values are:
             *     - `CR` (Customer’s Reference)
             *     - `AKG` (Vehicle Identification Number)
             *
             * @example CR
             */
            type: string;
            /**
             * @description The value of the reference.
             *
             * @example HHL00103004
             */
            value: string;
        };
        /**
         * Utilized Transport Equipment
         * @description Specifies the container (`equipment`), the total `weight`, total `volume`, possible `ActiveReeferSettings`, `seals` and `references`
         *
         */
        UtilizedTransportEquipment: {
            equipment: components["schemas"]["Equipment"];
            /**
             * @description Indicates whether the container is shipper owned (SOC).
             *
             * @example true
             */
            isShipperOwned: boolean;
            /**
             * @description If the equipment is a Reefer Container then setting this attribute will indicate that the container should be treated as a `DRY` container.
             *
             *     **Condition:** Only applicable if `ISOEquipmentCode` shows a Reefer type.
             *
             * @example false
             */
            isNonOperatingReefer?: boolean;
            activeReeferSettings?: components["schemas"]["ActiveReeferSettings"];
            /** @description A list of the `ShippingMarks` applicable to this `UtilizedTransportEquipment`
             *
             *     **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
             *      */
            shippingMarks?: string[];
            /** @description A list of `Seals`
             *      */
            seals: components["schemas"]["Seal"][];
            /** @description A list of `References`
             *      */
            references?: components["schemas"]["Reference"][];
            /** @description A list of `Customs references`
             *      */
            customsReferences?: components["schemas"]["CustomsReference"][];
        };
        /**
         * Transport Document
         * @description The document that governs the terms of carriage between shipper and carrier for maritime transportation. Two distinct types of transport documents exist:
         *     - Bill of Lading
         *     - Sea Waybill.
         *
         */
        TransportDocument: {
            /**
             * @description A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.
             *
             * @example HHL71800000
             */
            transportDocumentReference: string;
            /**
             * @description Additional reference that can be optionally used alongside the `transportDocumentReference` in order to distinguish between versions of the same `Transport Document`.
             *
             * @example Version_1
             */
            transportDocumentSubReference?: string;
            /**
             * @description The identifier for a `Shipping Instructions` provided by the carrier for system purposes.
             *
             * @example e0559d83-00e2-438e-afd9-fdd610c1a008
             */
            shippingInstructionsReference?: string;
            /**
             * @description The status of the `Transport Document`. Possible values are:
             *     - DRAFT
             *     - APPROVED
             *     - ISSUED
             *     - PENDING_SURRENDER_FOR_AMENDMENT
             *     - SURRENDERED_FOR_AMENDMENT
             *     - PENDING_SURRENDER_FOR_DELIVERY
             *     - SURRENDERED_FOR_DELIVERY
             *     - VOIDED
             *
             * @example DRAFT
             */
            transportDocumentStatus: string;
            /**
             * @description Specifies the type of the transport document
             *     - `BOL` (Bill of Lading)
             *     - `SWB` (Sea Waybill)
             *
             * @example SWB
             * @enum {string}
             */
            transportDocumentTypeCode: "BOL" | "SWB";
            /**
             * @description Specifies whether the Transport Document is a received for shipment, or shipped on board.
             *
             * @example true
             */
            isShippedOnBoardType: boolean;
            /**
             * @description An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
             *
             *     - `PRE` (Prepaid)
             *     - `COL` (Collect)
             *
             * @example PRE
             * @enum {string}
             */
            freightPaymentTermCode?: "PRE" | "COL";
            /**
             * @description An indicator whether the transport document is electronically transferred.
             *
             * @example true
             */
            isElectronic: boolean;
            /**
             * @description Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).
             *
             *     `isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).
             *
             * @example false
             */
            isToOrder: boolean;
            /**
             * Format: int32
             * @description The requested number of copies of the `Transport Document` to be issued by the carrier including charges.
             *
             *     **Conditions:** The following table defines the conditions for the `numberOfCopiesWithCharges` property:
             *     | Transport Document Type Code | Is Electronic | Meaning |
             *     |-------|:-------:|-------|
             *     |`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier with charges|
             *     |`BOL`|`true`|Not applicable, there are no copies|
             *     |`SWB`|`false`|Indicates that charges should be included in the `SWB` (pdf or other formats)|
             *     |`SWB`|`true`|Indicates that charges should be included in the electronic `SWB`|
             *
             * @example 2
             */
            numberOfCopiesWithCharges?: number;
            /**
             * Format: int32
             * @description The requested number of copies of the `Transport Document` to be issued by the carrier **NOT** including charges.
             *
             *     **Conditions:** The following table defines the conditions for the `numberOfCopiesWithoutCharges` property:
             *     | Transport Document Type Code | Is Electronic | Meaning |
             *     |-------|:-------:|-------|
             *     |`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier without charges|
             *     |`BOL`|`true`|Not applicable, there are no copies|
             *     |`SWB`|`false`|Indicates that charges should NOT be included in the `SWB` (pdf or other formats)|
             *     |`SWB`|`true`|Indicates that charges NOT should be included in the electronic `SWB`|
             *
             * @example 2
             */
            numberOfCopiesWithoutCharges?: number;
            /**
             * Format: int32
             * @description Number of originals of the Bill of Lading that has been requested by the customer with charges.
             *
             *     **Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)
             *
             * @example 1
             */
            numberOfOriginalsWithCharges?: number;
            /**
             * Format: int32
             * @description Number of originals of the Bill of Lading that has been requested by the customer without charges.
             *
             *     **Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)
             *
             * @example 1
             */
            numberOfOriginalsWithoutCharges?: number;
            /** @description The name to be used in order to specify how the `Place of Receipt` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
             *
             *     **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
             *      */
            displayedNameForPlaceOfReceipt?: string[];
            /** @description The name to be used in order to specify how the `Port of Load` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
             *
             *     **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
             *      */
            displayedNameForPortOfLoad?: string[];
            /** @description The name to be used in order to specify how the `Port of Discharge` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
             *
             *     **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
             *      */
            displayedNameForPortOfDischarge?: string[];
            /** @description The name to be used in order to specify how the `Place of Delivery` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
             *
             *     **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
             *      */
            displayedNameForPlaceOfDelivery?: string[];
            /**
             * Format: date
             * @description Date when the last container that is linked to the transport document is physically loaded onboard the vessel indicated on the transport document.
             *
             *     When provided on a transport document, the transportDocument is a `Shipped On Board` B/L.
             *
             *     Exactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.
             *
             * @example 2020-12-12
             */
            shippedOnBoardDate?: string;
            /**
             * @description The text to be displayed on the `Transport Document` as evidence that the goods have been received for shipment or shipped on board.
             *
             * @example Received for Shipment CMA CGM CONCORDE 28-Jul-2022 CMA CGM Agences France SAS As agents for the Carrier
             */
            displayedShippedOnBoardReceivedForShipment?: string;
            /**
             * @description Carrier terms and conditions of transport.
             *
             * @example Any reference in...
             */
            termsAndConditions: string;
            /**
             * @description Indicates the type of service offered at `Origin`. The options are:
             *     - `CY` (Container yard (incl. rail ramp))
             *     - `SD` (Store Door)
             *     - `CFS` (Container Freight Station)
             *
             * @example CY
             * @enum {string}
             */
            receiptTypeAtOrigin: "CY" | "SD" | "CFS";
            /**
             * @description Indicates the type of service offered at `Destination`. The options are:
             *
             *     - `CY` (Container yard (incl. rail ramp))
             *     - `SD` (Store Door)
             *     - `CFS` (Container Freight Station)
             *
             * @example CY
             * @enum {string}
             */
            deliveryTypeAtDestination: "CY" | "SD" | "CFS";
            /**
             * @description Refers to the shipment term at the **loading** of the cargo into the container. Possible values are:
             *
             *     - `FCL` (Full Container Load)
             *     - `LCL` (Less than Container Load)
             *
             * @example FCL
             */
            cargoMovementTypeAtOrigin: string;
            /**
             * @description Refers to the shipment term at the **unloading** of the cargo out of the container. Possible values are:
             *
             *     - `FCL` (Full Container Load)
             *     - `LCL` (Less than Container Load)
             *
             * @example FCL
             */
            cargoMovementTypeAtDestination: string;
            /**
             * Format: date
             * @description Local date when the transport document has been issued.
             *
             *     Can be omitted on draft transport documents, but must be provided when the document has been issued.
             *
             * @example 2020-12-12
             */
            issueDate?: string;
            /**
             * Format: date
             * @description Date when the last container linked to the transport document is physically in the terminal (customers cleared against the intended vessel).
             *
             *     When provided on a transport document, the transportDocument is a `Received For Shipment` B/L.
             *
             *     Exactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.
             *
             * @example 2020-12-12
             */
            receivedForShipmentDate?: string;
            /**
             * @description Reference number for agreement between shipper and carrier, which optionally includes a certain minimum quantity commitment (usually referred as “MQC”) of cargo that the shipper commits to over a fixed period, and the carrier commits to a certain rate or rate schedule.
             *
             * @example HHL51800000
             */
            serviceContractReference?: string;
            /**
             * @description Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference.
             *
             * @example HHL1401
             */
            contractQuotationReference?: string;
            /**
             * Format: float
             * @description The value of the cargo that the shipper declares in order to avoid the carrier's limitation of liability and "Ad Valorem" freight, i.e., freight which is calculated based on the value of the goods declared by the shipper.
             *
             *     **Condition:** Included in the transport document upon customer request. If customers want the value to show, evidence is required, and customers need to approve additional insurance fee charge from the carrier (very exceptional).
             *
             * @example 1231.1
             */
            declaredValue?: number;
            /**
             * @description The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html).
             *
             *     **Condition:** Mandatory if `declaredValue` is provided. If `declaredValue` is not provided, this field must be empty.
             *
             * @example DKK
             */
            declaredValueCurrency?: string;
            /**
             * @description The `SCAC` code (provided by [NMFTA](https://nmfta.org/scac/)) or `SMDG` code (provided by [SMDG](https://smdg.org/documents/smdg-code-lists/smdg-liner-code-list/)) of the issuing carrier of the `Transport Document`. `carrierCodeListProvider` defines which list the `carrierCode` is based upon.
             *
             * @example MMCU
             */
            carrierCode: string;
            /**
             * @description The code list provider for the `carrierCode`. Possible values are:
             *     - `SMDG` (Ship Message Design Group)
             *     - `NMFTA` (National Motor Freight Traffic Association)
             *
             * @example NMFTA
             * @enum {string}
             */
            carrierCodeListProvider: "SMDG" | "NMFTA";
            /** @description Additional clauses for a specific shipment added by the carrier to the Bill of Lading, subject to local rules / guidelines or certain mandatory information required to be shared with the customer.
             *      */
            carrierClauses?: string[];
            /**
             * Format: int32
             * @description The number of additional pages required to contain the goods description on a transport document. Only applicable for physical transport documents.
             *
             * @example 2
             */
            numberOfRiderPages?: number;
            transports: components["schemas"]["Transports"];
            /** @description A list of `Charges`
             *      */
            charges?: components["schemas"]["Charge"][];
            placeOfIssue?: components["schemas"]["PlaceOfIssue"];
            invoicePayableAt: components["schemas"]["InvoicePayableAt"];
            /** @description The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.)
             *      */
            partyContactDetails: components["schemas"]["PartyContactDetail"][];
            documentParties: components["schemas"]["DocumentParties"];
            /** @description A list of `ConsignmentItems`
             *      */
            consignmentItems: components["schemas"]["ConsignmentItem"][];
            /** @description A list of `Utilized Transport Equipments` describing the equipment being used.
             *      */
            utilizedTransportEquipments: components["schemas"]["UtilizedTransportEquipment"][];
            exportLicense?: components["schemas"]["ExportLicense"];
            importLicense?: components["schemas"]["ImportLicense"];
            /** @description A list of `References`
             *      */
            references?: components["schemas"]["Reference"][];
            /** @description A list of `Customs references`
             *      */
            customsReferences?: components["schemas"]["CustomsReference"][];
        };
    };
    responses: never;
    parameters: {
        /** @description DID of the business unit who makes the request */
        BURequestHeader: string;
        /** @description The number of items to skip before collecting the result set. */
        offsetParam: number;
        /** @description The number of items to return. */
        limitParam: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
